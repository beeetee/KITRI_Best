package com.example.demo.board.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.example.demo.board.domain.ProductVO;

@Controller
@RequestMapping("/product")
public class ProductController {

	// 상품 등록
	@RequestMapping(value = "/upload", method = RequestMethod.POST)
	public String uploadProduct(MultipartHttpServletRequest request) throws Exception {

		ProductVO product = new ProductVO();
		MultipartFile image = request.getFile("image");
		product.setId("\'"+request.getParameter("id")+"\'");
		product.setName("\'"+request.getParameter("name")+"\'");
		product.setType("\'"+request.getParameter("type")+"\'");
		product.setPrice(Integer.parseInt("\'"+request.getParameter("price")+"\'"));
		product.setDescription("\'"+request.getParameter("description")+"\'");
		product.setImage(image.getBytes());
		product.setStatus("\'"+request.getParameter("status")+"\'");
		//proRepo.save(product);
		return "redirect:/";
	}

	/*
	// 상품 검색
	@RequestMapping(value = "/search", method = RequestMethod.POST)
	public ModelAndView searchProduct(@RequestParam("search") String search_name, ModelAndView mav) {
		List<Product> products = proRepo.findByName(search_name);
		mav.setViewName("searched_products");
		mav.addObject("products", products);
		return mav;
	}
	
	@RequestMapping(value = "/search", method = RequestMethod.GET)
	public String searchedProduct() {
		return "redirect:/";
	}

	// 상품 삭제
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public @ResponseBody ApiResponseMessage deleteProduct(@ModelAttribute @Valid Product product, Model model) {
		if (proRepo.existsById(product.getId())) {
			proRepo.deleteById(product.getId());
			System.out.println("delete");
			return new ApiResponseMessage("200", "delete");
		}
		else {
			return new ApiResponseMessage("200", "delete", "PDE" ,"Product Doesn't Exist");
		}
	}

	// 상품 수정
	// 상품 상세 페이지 -> 수정 버튼 -> 클릭 -> 상품정보를 POST로 보내주기
	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public String updateProduct(@RequestParam("id") String id, @RequestParam("name") String name,
			@RequestParam("type") String type, @RequestParam("price") int price,
			@RequestParam("description") String description, @RequestParam("image") MultipartFile file,
			@RequestParam("status") String status, Model model) throws Exception {
		if (proRepo.existsById(id)) {
			Product product = new Product(id, name, type, price, description, file.getBytes(), status);
			proRepo.save(product);
			ApiResponseMessage result = new ApiResponseMessage("200", "update");
			model.addAttribute("result", result);
			return "redirect:/";
		}
		else {
			ApiResponseMessage result = new ApiResponseMessage("200", "update", "PDE" ,"Product Doesn't Exist");
			model.addAttribute("result", result);
			return "redirect:/";
		}
	}
	*/
}
